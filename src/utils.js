"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _sortObjectKeys = require("sort-object-keys2");
exports.SYMBOL_OPTIONS = Symbol('options');
exports.SYMBOL_NODE = Symbol('node');
function compareById(vector) {
    return (a, b) => {
        const aid = Number(a.get('id'));
        const bid = Number(b.get('id'));
        if (aid > bid) {
            return vector ? 1 : -1;
        }
        else if (aid < bid) {
            return vector ? -1 : 1;
        }
        else {
            return 0;
        }
    };
}
exports.compareById = compareById;
/**
 * remove-empty-children (for json tree)
 * @param {*} jTree
 * @param {*} node
 * @param {*} options
 */
function removeEmptyChildren(jTree, node = null, options) {
    const { key_children } = options;
    node = node || jTree[0];
    if (node[key_children].length === 0) {
        delete node[key_children];
    }
    else {
        node[key_children].forEach(item => {
            removeEmptyChildren(jTree, item, options);
        });
    }
}
exports.removeEmptyChildren = removeEmptyChildren;
/**
 * search-node
 * @param {*} tree
 * @param {*} node
 * @param {*} criteria
 * @param {*} options
 */
function searchNode(tree, node, criteria, options) {
    const currentNode = node || tree.rootNode;
    if (criteria(currentNode)) {
        return currentNode;
    }
    const children = currentNode.children;
    let target = null;
    for (let i = 0; i < children.length; i++) {
        const item = children[i];
        target = searchNode(tree, item, criteria);
        if (target) {
            return target;
        }
    }
}
exports.searchNode = searchNode;
/**
 * showTree
 * @param {*} tree
 * @param {*} node
 * @param {*} level
 */
function showTree(tree, node = null, level = 1) {
    node = node || tree[0];
    if (node && node.content) {
        console.log(new Array(level).join('\t'), node.content);
    }
    if (node && node.children) {
        node.children.forEach(item => {
            showTree(tree, item, level + 1);
        });
    }
}
exports.showTree = showTree;
/**
 * traversal-tree
 * @param {*} tree
 * @param {*} node
 * @param {*} criteria
 * @param {*} callback
 */
function traversalTree(tree, node = null, criteria, callback) {
    const currentNode = node || tree.rootNode;
    if (!node) {
        if (typeof criteria === 'function' && criteria(currentNode)) {
            callback(currentNode);
        }
        else if (criteria === null) {
            callback(currentNode);
        }
    }
    currentNode.traversal(criteria, callback);
    const children = currentNode.children;
    children.forEach(item => {
        traversalTree(tree, item, criteria, callback);
    });
}
exports.traversalTree = traversalTree;
//export interface ISerializeTreeItem<T>
//{
//	[SYMBOL_OPTIONS]?: {
//		tree: Tree<T>,
//		options: Tree<T>["options"],
//	},
//	[k: string]: any,
//}
/**
 * serializeTree
 * @param {*} tree
 * @param {*} node
 * @param {*} target
 * @param {*} options
 */
function serializeTree(tree, node = null, target = [], options) {
    const { key_children } = options;
    node = node || tree.rootNode;
    if (!node) {
        return null;
    }
    const index = target.push(Object.assign({ [key_children]: [] }, node.content));
    node.children.forEach(item => {
        serializeTree(tree, item, target[index - 1][key_children], options);
    });
    return target;
}
exports.serializeTree = serializeTree;
function sortKeys(data) {
    return _sortObjectKeys(data, {
        keys: [
            'id',
            'parent',
            'uuid',
            'level',
            'content',
            'children',
        ],
        useSource: true,
    });
}
exports.sortKeys = sortKeys;
//# sourceMappingURL=data:application/json;base64,